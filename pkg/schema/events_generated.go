package schema

// Autogenerated file. DO NOT MODIFY DIRECTLY!
/*
 *  Copyright (c) 2022 Avesha, Inc. All rights reserved.
 *
 *  SPDX-License-Identifier: Apache-2.0
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

var eventsMap = map[string]*EventSchema{
	"LicenseSecretNotFound": {
		Name:                "LicenseSecretNotFound",
		Reason:              "LicenseNotFound",
		Action:              "LicenseValidation",
		Type:                EventTypeWarning,
		ReportingController: "controller",
		Message:             "Secret with license config not found. Please ensure to create license secret if this is airgapped cluster.",
	},
	"MachineFileNotFound": {
		Name:                "MachineFileNotFound",
		Reason:              "MachineFileNotFound",
		Action:              "FetchMachineFileFromSecret",
		Type:                EventTypeWarning,
		ReportingController: "controller",
		Message:             "Machine File not present in license secret. Please contact kubeslice support team.",
	},
	"MachineFileInvalid": {
		Name:                "MachineFileInvalid",
		Reason:              "MachineFileInvalid",
		Action:              "VerifyMachineFile",
		Type:                EventTypeWarning,
		ReportingController: "controller",
		Message:             "Machine File is invalid in license secret. Please contact kubeslice support team.",
	},
	"LicenseKeyInvalid": {
		Name:                "LicenseKeyInvalid",
		Reason:              "LicenseKeyInvalid",
		Action:              "DecryptMachineFile",
		Type:                EventTypeWarning,
		ReportingController: "controller",
		Message:             "License Key is invalid in license secret. Please contact kubeslice support team.",
	},
	"LicenseExpired": {
		Name:                "LicenseExpired",
		Reason:              "LicenseExpired",
		Action:              "ValidateLicense",
		Type:                EventTypeWarning,
		ReportingController: "controller",
		Message:             "License Expired, please contact kubeslice support team to get it renewed!",
	},
	"LicenseExpiredGracePeriodOn": {
		Name:                "LicenseExpiredGracePeriodOn",
		Reason:              "LicenseExpiredGracePeriodOn",
		Action:              "ValidateLicense",
		Type:                EventTypeWarning,
		ReportingController: "controller",
		Message:             "License Expired, grace period is on, please contact kubeslice support team to get it renewed!",
	},
	"MachineFingerPrintErr": {
		Name:                "MachineFingerPrintErr",
		Reason:              "MachineFingerPrintErr",
		Action:              "GetMachineFingerPrint",
		Type:                EventTypeWarning,
		ReportingController: "kubeslice-controller",
		Message:             "Unable to fetch MachineFingerPrint. Please look at the kubeslice-controller logs for more details.",
	},
	"GotMachineFingerPrint": {
		Name:                "GotMachineFingerPrint",
		Reason:              "GotMachineFingerPrint",
		Action:              "GetMachineFingerPrint",
		Type:                EventTypeNormal,
		ReportingController: "kubeslice-controller",
		Message:             "Got MachineFingerPrint successfully",
	},
	"ConfigMapErr": {
		Name:                "ConfigMapErr",
		Reason:              "ConfigMapErr",
		Action:              "GetConfigMap",
		Type:                EventTypeWarning,
		ReportingController: "kubeslice-controller",
		Message:             "Unable to validate license keys from configmap. Please contact kubeslice support team",
	},
	"GotConfigMap": {
		Name:                "GotConfigMap",
		Reason:              "GotConfigMap",
		Action:              "GetConfigMap",
		Type:                EventTypeNormal,
		ReportingController: "kubeslice-controller",
		Message:             "Got ConfigMap and kubeslice-license public keys successfully.",
	},
	"LicenseProxyUnreachable": {
		Name:                "LicenseProxyUnreachable",
		Reason:              "LicenseProxyUnreachable",
		Action:              "LicenseProxy",
		Type:                EventTypeWarning,
		ReportingController: "kubeslice-controller",
		Message:             "Failed to get response from license proxy for automatic license creation. Please contact Avesha to obtain licernse manually.",
	},
	"LicenseDeployError": {
		Name:                "LicenseDeployError",
		Reason:              "LicenseDeployError",
		Action:              "LicenseDeploy",
		Type:                EventTypeWarning,
		ReportingController: "kubeslice-controller",
		Message:             "Failed to deploy license secret.",
	},
	"LicenseDeploySuccess": {
		Name:                "LicenseDeploySuccess",
		Reason:              "LicenseDeploySuccess",
		Action:              "LicenseDeploy",
		Type:                EventTypeNormal,
		ReportingController: "kubeslice-controller",
		Message:             "Successfully fetched license data & deployed license secret.",
	},
	"ClusterMetadataCollectionFailed": {
		Name:                "ClusterMetadataCollectionFailed",
		Reason:              "ClusterMetadataCollectionFailed",
		Action:              "CollectClusterMetadata",
		Type:                EventTypeWarning,
		ReportingController: "kubeslice-controller",
		Message:             "Failed to collect cluster metadata for cluster creation.",
	},
	"ClusterMetadataCollectionSuccess": {
		Name:                "ClusterMetadataCollectionSuccess",
		Reason:              "ClusterMetadataCollectionSuccess",
		Action:              "CollectClusterMetadata",
		Type:                EventTypeNormal,
		ReportingController: "kubeslice-controller",
		Message:             "Successfully collected cluster metadata for license creation.",
	},
	"LicenseDataFetchError": {
		Name:                "LicenseDataFetchError",
		Reason:              "LicenseDataFetchError",
		Action:              "LicenseDataFetch",
		Type:                EventTypeWarning,
		ReportingController: "kubeslice-controller",
		Message:             "Failed to fetch license data from license proxy.",
	},
	"LicenseDataFetchSuccess": {
		Name:                "LicenseDataFetchSuccess",
		Reason:              "LicenseDataFetchSuccess",
		Action:              "LicenseDataFetch",
		Type:                EventTypeNormal,
		ReportingController: "kubeslice-controller",
		Message:             "Successfully fetched license data from license proxy.",
	},
	"LicenseSecretCreationFailed": {
		Name:                "LicenseSecretCreationFailed",
		Reason:              "LicenseSecretCreationFailed",
		Action:              "LicenseSecretCreation",
		Type:                EventTypeWarning,
		ReportingController: "kubeslice-controller",
		Message:             "Failed to create license secret.",
	},
	"LicenseSecretCreationSuccess": {
		Name:                "LicenseSecretCreationSuccess",
		Reason:              "LicenseSecretCreationSuccess",
		Action:              "LicenseSecretCreation",
		Type:                EventTypeNormal,
		ReportingController: "kubeslice-controller",
		Message:             "Successfully created license secret.",
	},
	"ProjectDeleted": {
		Name:                "ProjectDeleted",
		Reason:              "ProjectDeleted",
		Action:              "DeleteProject",
		Type:                EventTypeWarning,
		ReportingController: "controller",
		Message:             "Project got deleted.",
	},
	"ProjectDeletionFailed": {
		Name:                "ProjectDeletionFailed",
		Reason:              "ProjectDeletionFailed",
		Action:              "DeleteProject",
		Type:                EventTypeWarning,
		ReportingController: "controller",
		Message:             "Project deletion failed.",
	},
	"ClusterDeleted": {
		Name:                "ClusterDeleted",
		Reason:              "ClusterDeleted",
		Action:              "DeleteCluster",
		Type:                EventTypeWarning,
		ReportingController: "controller",
		Message:             "Cluster got deleted.",
	},
	"ClusterDeletionFailed": {
		Name:                "ClusterDeletionFailed",
		Reason:              "ClusterDeletionFailed",
		Action:              "DeleteCluster",
		Type:                EventTypeWarning,
		ReportingController: "controller",
		Message:             "Cluster deletion failed.",
	},
	"SliceConfigDeleted": {
		Name:                "SliceConfigDeleted",
		Reason:              "SliceConfigDeleted",
		Action:              "DeleteSliceConfig",
		Type:                EventTypeWarning,
		ReportingController: "controller",
		Message:             "Slice config got deleted.",
	},
	"SliceConfigDeletionFailed": {
		Name:                "SliceConfigDeletionFailed",
		Reason:              "SliceConfigDeletionFailed",
		Action:              "DeleteSliceConfig",
		Type:                EventTypeWarning,
		ReportingController: "controller",
		Message:             "Slice config deletion failed.",
	},
	"ServiceExportConfigDeleted": {
		Name:                "ServiceExportConfigDeleted",
		Reason:              "ServiceExportConfigDeleted",
		Action:              "DeleteServiceExportConfig",
		Type:                EventTypeWarning,
		ReportingController: "controller",
		Message:             "Service export config got deleted.",
	},
	"ServiceExportConfigDeletionFailed": {
		Name:                "ServiceExportConfigDeletionFailed",
		Reason:              "ServiceExportConfigDeletionFailed",
		Action:              "DeleteServiceExportConfig",
		Type:                EventTypeWarning,
		ReportingController: "controller",
		Message:             "Service export config deletion failed.",
	},
	"SliceQoSConfigDeleted": {
		Name:                "SliceQoSConfigDeleted",
		Reason:              "SliceQoSConfigDeleted",
		Action:              "DeleteSliceQoSConfig",
		Type:                EventTypeWarning,
		ReportingController: "controller",
		Message:             "Slice QoS config got deleted.",
	},
	"SliceQoSConfigDeletionFailed": {
		Name:                "SliceQoSConfigDeletionFailed",
		Reason:              "SliceQoSConfigDeletionFailed",
		Action:              "DeleteSliceQoSConfig",
		Type:                EventTypeWarning,
		ReportingController: "controller",
		Message:             "Slice QoS config deletion failed.",
	},
	"SecretDeleted": {
		Name:                "SecretDeleted",
		Reason:              "SecretDeleted",
		Action:              "DeleteSecret",
		Type:                EventTypeWarning,
		ReportingController: "controller",
		Message:             "Secret got deleted.",
	},
	"SecretDeletionFailed": {
		Name:                "SecretDeletionFailed",
		Reason:              "SecretDeletionFailed",
		Action:              "DeleteSecret",
		Type:                EventTypeWarning,
		ReportingController: "controller",
		Message:             "Secret deletion failed.",
	},
	"NamespaceCreated": {
		Name:                "NamespaceCreated",
		Reason:              "NamespaceCreated",
		Action:              "CreateNamespace",
		Type:                EventTypeNormal,
		ReportingController: "controller",
		Message:             "Namespace got created.",
	},
	"NamespaceCreationFailed": {
		Name:                "NamespaceCreationFailed",
		Reason:              "NamespaceCreationFailed",
		Action:              "CreateNamespace",
		Type:                EventTypeWarning,
		ReportingController: "controller",
		Message:             "Namespace creation failed.",
	},
	"NamespaceDeleted": {
		Name:                "NamespaceDeleted",
		Reason:              "NamespaceDeleted",
		Action:              "DeleteNamespace",
		Type:                EventTypeWarning,
		ReportingController: "controller",
		Message:             "Namespace got deleted.",
	},
	"NamespaceDeletionFailed": {
		Name:                "NamespaceDeletionFailed",
		Reason:              "NamespaceDeletionFailed",
		Action:              "DeleteNamespace",
		Type:                EventTypeWarning,
		ReportingController: "controller",
		Message:             "Namespace deletion failed.",
	},
	"WorkerClusterRoleCreated": {
		Name:                "WorkerClusterRoleCreated",
		Reason:              "WorkerClusterRoleCreated",
		Action:              "CreateWorkerClusterRole",
		Type:                EventTypeNormal,
		ReportingController: "controller",
		Message:             "Worker cluster role got created.",
	},
	"WorkerClusterRoleCreationFailed": {
		Name:                "WorkerClusterRoleCreationFailed",
		Reason:              "WorkerClusterRoleCreationFailed",
		Action:              "CreateWorkerClusterRole",
		Type:                EventTypeWarning,
		ReportingController: "controller",
		Message:             "Worker cluster role creation failed.",
	},
	"WorkerClusterRoleUpdated": {
		Name:                "WorkerClusterRoleUpdated",
		Reason:              "WorkerClusterRoleUpdated",
		Action:              "UpdateWorkerClusterRole",
		Type:                EventTypeNormal,
		ReportingController: "controller",
		Message:             "Worker cluster role got updated.",
	},
	"WorkerClusterRoleUpdateFailed": {
		Name:                "WorkerClusterRoleUpdateFailed",
		Reason:              "WorkerClusterRoleUpdateFailed",
		Action:              "UpdateWorkerClusterRole",
		Type:                EventTypeWarning,
		ReportingController: "controller",
		Message:             "Worker cluster role update failed.",
	},
	"ReadOnlyRoleCreated": {
		Name:                "ReadOnlyRoleCreated",
		Reason:              "ReadOnlyRoleCreated",
		Action:              "CreateReadOnlyRole",
		Type:                EventTypeNormal,
		ReportingController: "controller",
		Message:             "Read only role got created.",
	},
	"ReadOnlyRoleCreationFailed": {
		Name:                "ReadOnlyRoleCreationFailed",
		Reason:              "ReadOnlyRoleCreationFailed",
		Action:              "CreateReadOnlyRole",
		Type:                EventTypeWarning,
		ReportingController: "controller",
		Message:             "Read only role creation failed.",
	},
	"ReadOnlyRoleUpdated": {
		Name:                "ReadOnlyRoleUpdated",
		Reason:              "ReadOnlyRoleUpdated",
		Action:              "UpdateReadOnlyRole",
		Type:                EventTypeNormal,
		ReportingController: "controller",
		Message:             "Read only role got updated.",
	},
	"ReadOnlyRoleUpdateFailed": {
		Name:                "ReadOnlyRoleUpdateFailed",
		Reason:              "ReadOnlyRoleUpdateFailed",
		Action:              "UpdateReadOnlyRole",
		Type:                EventTypeWarning,
		ReportingController: "controller",
		Message:             "Read only role update failed.",
	},
	"ReadWriteRoleCreated": {
		Name:                "ReadWriteRoleCreated",
		Reason:              "ReadWriteRoleCreated",
		Action:              "CreateReadWriteRole",
		Type:                EventTypeNormal,
		ReportingController: "controller",
		Message:             "Read write role got created.",
	},
	"ReadWriteRoleCreationFailed": {
		Name:                "ReadWriteRoleCreationFailed",
		Reason:              "ReadWriteRoleCreationFailed",
		Action:              "CreateReadWriteRole",
		Type:                EventTypeWarning,
		ReportingController: "controller",
		Message:             "Read write role creation failed.",
	},
	"ReadWriteRoleUpdated": {
		Name:                "ReadWriteRoleUpdated",
		Reason:              "ReadWriteRoleUpdated",
		Action:              "UpdateReadWriteRole",
		Type:                EventTypeNormal,
		ReportingController: "controller",
		Message:             "Read write role got updated.",
	},
	"ReadWriteRoleUpdateFailed": {
		Name:                "ReadWriteRoleUpdateFailed",
		Reason:              "ReadWriteRoleUpdateFailed",
		Action:              "UpdateReadWriteRole",
		Type:                EventTypeWarning,
		ReportingController: "controller",
		Message:             "Read write role update failed.",
	},
	"ServiceAccountCreated": {
		Name:                "ServiceAccountCreated",
		Reason:              "ServiceAccountCreated",
		Action:              "CreateServiceAccount",
		Type:                EventTypeNormal,
		ReportingController: "controller",
		Message:             "Service account got created.",
	},
	"ServiceAccountCreationFailed": {
		Name:                "ServiceAccountCreationFailed",
		Reason:              "ServiceAccountCreationFailed",
		Action:              "CreateServiceAccount",
		Type:                EventTypeWarning,
		ReportingController: "controller",
		Message:             "Service account creation failed.",
	},
	"ServiceAccountSecretCreated": {
		Name:                "ServiceAccountSecretCreated",
		Reason:              "ServiceAccountSecretCreated",
		Action:              "CreateServiceAccountSecret",
		Type:                EventTypeNormal,
		ReportingController: "controller",
		Message:             "Service account secret got created.",
	},
	"ServiceAccountSecretCreationFailed": {
		Name:                "ServiceAccountSecretCreationFailed",
		Reason:              "ServiceAccountSecretCreationFailed",
		Action:              "CreateServiceAccountSecret",
		Type:                EventTypeWarning,
		ReportingController: "controller",
		Message:             "Service account secret creation failed.",
	},
	"DefaultRoleBindingCreated": {
		Name:                "DefaultRoleBindingCreated",
		Reason:              "DefaultRoleBindingCreated",
		Action:              "CreateDefaultRoleBinding",
		Type:                EventTypeNormal,
		ReportingController: "controller",
		Message:             "Default role binding got created.",
	},
	"DefaultRoleBindingCreationFailed": {
		Name:                "DefaultRoleBindingCreationFailed",
		Reason:              "DefaultRoleBindingCreationFailed",
		Action:              "CreateDefaultRoleBinding",
		Type:                EventTypeWarning,
		ReportingController: "controller",
		Message:             "Default role binding creation failed.",
	},
	"DefaultRoleBindingUpdated": {
		Name:                "DefaultRoleBindingUpdated",
		Reason:              "DefaultRoleBindingUpdated",
		Action:              "UpdateDefaultRoleBinding",
		Type:                EventTypeNormal,
		ReportingController: "controller",
		Message:             "Default role binding got updated.",
	},
	"DefaultRoleBindingUpdateFailed": {
		Name:                "DefaultRoleBindingUpdateFailed",
		Reason:              "DefaultRoleBindingUpdateFailed",
		Action:              "UpdateDefaultRoleBinding",
		Type:                EventTypeWarning,
		ReportingController: "controller",
		Message:             "Default role binding update failed.",
	},
	"DefaultRoleBindingDeleted": {
		Name:                "DefaultRoleBindingDeleted",
		Reason:              "DefaultRoleBindingDeleted",
		Action:              "DeleteDefaultRoleBinding",
		Type:                EventTypeWarning,
		ReportingController: "controller",
		Message:             "Default role binding got deleted.",
	},
	"DefaultRoleBindingDeletionFailed": {
		Name:                "DefaultRoleBindingDeletionFailed",
		Reason:              "DefaultRoleBindingDeletionFailed",
		Action:              "DeleteDefaultRoleBinding",
		Type:                EventTypeWarning,
		ReportingController: "controller",
		Message:             "Default role binding deletion failed.",
	},
	"InactiveRoleBindingDeleted": {
		Name:                "InactiveRoleBindingDeleted",
		Reason:              "InactiveRoleBindingDeleted",
		Action:              "DeleteInactiveRoleBinding",
		Type:                EventTypeWarning,
		ReportingController: "controller",
		Message:             "Inactive role binding got deleted.",
	},
	"InactiveRoleBindingDeletionFailed": {
		Name:                "InactiveRoleBindingDeletionFailed",
		Reason:              "InactiveRoleBindingDeletionFailed",
		Action:              "DeleteInactiveRoleBinding",
		Type:                EventTypeWarning,
		ReportingController: "controller",
		Message:             "Inactive role binding deletion failed.",
	},
	"InactiveServiceAccountDeleted": {
		Name:                "InactiveServiceAccountDeleted",
		Reason:              "InactiveServiceAccountDeleted",
		Action:              "DeleteInactiveServiceAccount",
		Type:                EventTypeWarning,
		ReportingController: "controller",
		Message:             "Inactive service account got deleted.",
	},
	"InactiveServiceAccountDeletionFailed": {
		Name:                "InactiveServiceAccountDeletionFailed",
		Reason:              "InactiveServiceAccountDeletionFailed",
		Action:              "DeleteInactiveServiceAccount",
		Type:                EventTypeWarning,
		ReportingController: "controller",
		Message:             "Inactive service account deletion failed.",
	},
	"ServiceAccountDeleted": {
		Name:                "ServiceAccountDeleted",
		Reason:              "ServiceAccountDeleted",
		Action:              "DeleteServiceAccount",
		Type:                EventTypeWarning,
		ReportingController: "controller",
		Message:             "Service account got deleted.",
	},
	"ServiceAccountDeletionFailed": {
		Name:                "ServiceAccountDeletionFailed",
		Reason:              "ServiceAccountDeletionFailed",
		Action:              "DeleteServiceAccount",
		Type:                EventTypeWarning,
		ReportingController: "controller",
		Message:             "Service account deletion failed.",
	},
	"DefaultDeploymentSliceRoleTemplateCreationFailed": {
		Name:                "DefaultDeploymentSliceRoleTemplateCreationFailed",
		Reason:              "DefaultDeploymentSliceRoleTemplateCreationFailed",
		Action:              "CreateSliceRoleTemplate",
		Type:                EventTypeWarning,
		ReportingController: "controller",
		Message:             "Default deployment slice role template creation failed.",
	},
	"DefaultDeploymentSliceRoleTemplateCreated": {
		Name:                "DefaultDeploymentSliceRoleTemplateCreated",
		Reason:              "DefaultDeploymentSliceRoleTemplateCreated",
		Action:              "CreateSliceRoleTemplate",
		Type:                EventTypeNormal,
		ReportingController: "controller",
		Message:             "Default deployment slice role template got created.",
	},
	"DefaultReaderSliceRoleTemplateCreationFailed": {
		Name:                "DefaultReaderSliceRoleTemplateCreationFailed",
		Reason:              "DefaultReaderSliceRoleTemplateCreationFailed",
		Action:              "CreateSliceRoleTemplate",
		Type:                EventTypeWarning,
		ReportingController: "controller",
		Message:             "Default reader slice role template creation failed.",
	},
	"DefaultReaderSliceRoleTemplateCreated": {
		Name:                "DefaultReaderSliceRoleTemplateCreated",
		Reason:              "DefaultReaderSliceRoleTemplateCreated",
		Action:              "CreateSliceRoleTemplate",
		Type:                EventTypeNormal,
		ReportingController: "controller",
		Message:             "Default reader slice role template got created.",
	},
	"SliceResourceQuotaCreationFailed": {
		Name:                "SliceResourceQuotaCreationFailed",
		Reason:              "SliceResourceQuotaCreationFailed",
		Action:              "CreateSliceResourceQuota",
		Type:                EventTypeWarning,
		ReportingController: "controller",
		Message:             "Slice resource quota creation failed while creating slice config.",
	},
	"SliceResourceQuotaCreatedOnSliceConfigCreation": {
		Name:                "SliceResourceQuotaCreatedOnSliceConfigCreation",
		Reason:              "SliceResourceQuotaCreatedOnSliceConfigCreation",
		Action:              "CreateSliceResourceQuota",
		Type:                EventTypeNormal,
		ReportingController: "controller",
		Message:             "Slice resource quota got created while creating slice config.",
	},
	"SliceNodeAffinityDeletionFailed": {
		Name:                "SliceNodeAffinityDeletionFailed",
		Reason:              "SliceNodeAffinityDeletionFailed",
		Action:              "DeleteSliceNodeAffinity",
		Type:                EventTypeWarning,
		ReportingController: "controller",
		Message:             "Slice node affinity deletion failed.",
	},
	"SliceNodeAffinityDeleted": {
		Name:                "SliceNodeAffinityDeleted",
		Reason:              "SliceNodeAffinityDeleted",
		Action:              "DeleteSliceNodeAffinity",
		Type:                EventTypeWarning,
		ReportingController: "controller",
		Message:             "Slice node affinity got deleted.",
	},
	"SetSliceConfigAsOwnerOfSliceNodeAffinityFailed": {
		Name:                "SetSliceConfigAsOwnerOfSliceNodeAffinityFailed",
		Reason:              "SetSliceConfigAsOwnerOfSliceNodeAffinityFailed",
		Action:              "SetSliceConfigAsOwnerOfSliceNodeAffinity",
		Type:                EventTypeWarning,
		ReportingController: "controller",
		Message:             "Failed to set slice config as owner of slice node affinity.",
	},
	"SetSliceConfigAsOwnerOfSliceNodeAffinitySucceeded": {
		Name:                "SetSliceConfigAsOwnerOfSliceNodeAffinitySucceeded",
		Reason:              "SetSliceConfigAsOwnerOfSliceNodeAffinitySucceeded",
		Action:              "SetSliceConfigAsOwnerOfSliceNodeAffinity",
		Type:                EventTypeNormal,
		ReportingController: "controller",
		Message:             "Successfully set slice config as owner of slice node affinity.",
	},
	"SliceResourceQuotaDeletionFailed": {
		Name:                "SliceResourceQuotaDeletionFailed",
		Reason:              "SliceResourceQuotaDeletionFailed",
		Action:              "DeleteSliceResourceQuota",
		Type:                EventTypeWarning,
		ReportingController: "controller",
		Message:             "Slice resource quota deletion failed.",
	},
	"SliceResourceQuotaDeleted": {
		Name:                "SliceResourceQuotaDeleted",
		Reason:              "SliceResourceQuotaDeleted",
		Action:              "DeleteSliceResourceQuota",
		Type:                EventTypeWarning,
		ReportingController: "controller",
		Message:             "Slice resource quota got deleted.",
	},
	"SliceResourceQuotaRecreationFailed": {
		Name:                "SliceResourceQuotaRecreationFailed",
		Reason:              "SliceResourceQuotaRecreationFailed",
		Action:              "CreateSliceResourceQuota",
		Type:                EventTypeWarning,
		ReportingController: "controller",
		Message:             "Slice resource quota recreation failed after forceful deletion.",
	},
	"SliceResourceQuotaRecreated": {
		Name:                "SliceResourceQuotaRecreated",
		Reason:              "SliceResourceQuotaRecreated",
		Action:              "CreateSliceResourceQuota",
		Type:                EventTypeNormal,
		ReportingController: "controller",
		Message:             "Slice resource quota got recreated after forceful deletion.",
	},
	"SetSliceConfigAsOwnerOfSliceResourceQuotaFailed": {
		Name:                "SetSliceConfigAsOwnerOfSliceResourceQuotaFailed",
		Reason:              "SetSliceConfigAsOwnerOfSliceResourceQuotaFailed",
		Action:              "SetSliceConfigAsOwnerOfSliceResourceQuota",
		Type:                EventTypeWarning,
		ReportingController: "controller",
		Message:             "Failed to set slice config as owner of slice resource quota config.",
	},
	"SetSliceConfigAsOwnerOfSliceResourceQuotaSucceeded": {
		Name:                "SetSliceConfigAsOwnerOfSliceResourceQuotaSucceeded",
		Reason:              "SetSliceConfigAsOwnerOfSliceResourceQuotaSucceeded",
		Action:              "SetSliceConfigAsOwnerOfSliceResourceQuota",
		Type:                EventTypeNormal,
		ReportingController: "controller",
		Message:             "Successfully set slice config as owner of slice resource quota config.",
	},
	"SliceResourceQuotaCreated": {
		Name:                "SliceResourceQuotaCreated",
		Reason:              "SliceResourceQuotaCreated",
		Action:              "CreateSliceResourceQuota",
		Type:                EventTypeNormal,
		ReportingController: "controller",
		Message:             "Slice resource quota config got created successfully.",
	},
	"SliceResourceQuotaUpdated": {
		Name:                "SliceResourceQuotaUpdated",
		Reason:              "SliceResourceQuotaUpdated",
		Action:              "UpdateSliceResourceQuota",
		Type:                EventTypeNormal,
		ReportingController: "controller",
		Message:             "Slice resource quota config got updated successfully.",
	},
	"AllRQSpecificationViolationMetricsResetSuccess": {
		Name:                "AllRQSpecificationViolationMetricsResetSuccess",
		Reason:              "AllRQSpecificationViolationMetricsResetSuccess",
		Action:              "ResetResourceQuotaMetrics",
		Type:                EventTypeNormal,
		ReportingController: "controller",
		Message:             "All resource quota specifications and violations metrics got reset successfully.",
	},
	"SliceRQSpecificationViolationMetricsResetSuccess": {
		Name:                "SliceRQSpecificationViolationMetricsResetSuccess",
		Reason:              "SliceRQSpecificationViolationMetricsResetSuccess",
		Action:              "ResetResourceQuotaMetrics",
		Type:                EventTypeNormal,
		ReportingController: "controller",
		Message:             "All slice level resource quota specifications and violations metrics got reset successfully.",
	},
	"ClusterRQSpecificationViolationMetricsResetSuccess": {
		Name:                "ClusterRQSpecificationViolationMetricsResetSuccess",
		Reason:              "ClusterRQSpecificationViolationMetricsResetSuccess",
		Action:              "ResetResourceQuotaMetrics",
		Type:                EventTypeNormal,
		ReportingController: "controller",
		Message:             "All cluster level resource quota specifications and violations metrics got reset successfully.",
	},
	"OutdatedNamespaceRQSpecificationViolationMetricsResetSuccess": {
		Name:                "OutdatedNamespaceRQSpecificationViolationMetricsResetSuccess",
		Reason:              "OutdatedNamespaceRQSpecificationViolationMetricsResetSuccess",
		Action:              "ResetResourceQuotaMetrics",
		Type:                EventTypeNormal,
		ReportingController: "controller",
		Message:             "All outdated namespace level resource quota specifications and violations metrics got reset successfully.",
	},
	"OutdatedClusterRQSpecificationViolationMetricsResetSuccess": {
		Name:                "OutdatedClusterRQSpecificationViolationMetricsResetSuccess",
		Reason:              "OutdatedClusterRQSpecificationViolationMetricsResetSuccess",
		Action:              "ResetResourceQuotaMetrics",
		Type:                EventTypeNormal,
		ReportingController: "controller",
		Message:             "All outdated cluster level resource quota specifications and violations metrics got reset successfully.",
	},
	"SliceRoleBindingDeletingFailed": {
		Name:                "SliceRoleBindingDeletingFailed",
		Reason:              "SliceRoleBindingDeletingFailed",
		Action:              "DeleteSliceRoleBinding",
		Type:                EventTypeWarning,
		ReportingController: "controller",
		Message:             "Slice role binding deletion failed.",
	},
	"SliceRoleBindingDeleted": {
		Name:                "SliceRoleBindingDeleted",
		Reason:              "SliceRoleBindingDeleted",
		Action:              "DeleteSliceRoleBinding",
		Type:                EventTypeNormal,
		ReportingController: "controller",
		Message:             "Slice role binding got deleted.",
	},
	"SetSliceConfigAsOwnerOfSliceRoleBindingFailed": {
		Name:                "SetSliceConfigAsOwnerOfSliceRoleBindingFailed",
		Reason:              "SetSliceConfigAsOwnerOfSliceRoleBindingFailed",
		Action:              "SetSliceConfigAsOwnerOfSliceRoleBinding",
		Type:                EventTypeWarning,
		ReportingController: "controller",
		Message:             "Failed to set slice config as owner of slice role binding.",
	},
	"SetSliceConfigAsOwnerOfSliceRoleBindingSucceeded": {
		Name:                "SetSliceConfigAsOwnerOfSliceRoleBindingSucceeded",
		Reason:              "SetSliceConfigAsOwnerOfSliceRoleBindingSucceeded",
		Action:              "SetSliceConfigAsOwnerOfSliceRoleBinding",
		Type:                EventTypeNormal,
		ReportingController: "controller",
		Message:             "Successfully set slice config as owner of slice role binding.",
	},
	"SliceRoleTemplateDeletionFailed": {
		Name:                "SliceRoleTemplateDeletionFailed",
		Reason:              "SliceRoleTemplateDeletionFailed",
		Action:              "DeleteSliceRoleTemplate",
		Type:                EventTypeWarning,
		ReportingController: "controller",
		Message:             "Slice role template deletion failed.",
	},
	"SliceRoleTemplateDeleted": {
		Name:                "SliceRoleTemplateDeleted",
		Reason:              "SliceRoleTemplateDeleted",
		Action:              "DeleteSliceRoleTemplate",
		Type:                EventTypeNormal,
		ReportingController: "controller",
		Message:             "Slice role template got deleted.",
	},
	"WorkerSliceRoleBindingReconciliationSuccess": {
		Name:                "WorkerSliceRoleBindingReconciliationSuccess",
		Reason:              "WorkerSliceRoleBindingReconciliationSuccess",
		Action:              "ReconcileWorkerSliceRoleBinding",
		Type:                EventTypeNormal,
		ReportingController: "controller",
		Message:             "Reconciliation of worker slice role binding is successful due to the change in slice role template.",
	},
	"NetPolViolation": {
		Name:                "NetPolViolation",
		Reason:              "PolicyViolation",
		Action:              "PolicyMonitoring",
		Type:                EventTypeWarning,
		ReportingController: "worker",
		Message:             "Network policy violation - please ask admin to check the network policy configuration on the worker cluster. <link to tech doc event-list>",
	},
}

var (
	EventLicenseSecretNotFound                                        = "LicenseSecretNotFound"
	EventMachineFileNotFound                                          = "MachineFileNotFound"
	EventMachineFileInvalid                                           = "MachineFileInvalid"
	EventLicenseKeyInvalid                                            = "LicenseKeyInvalid"
	EventLicenseExpired                                               = "LicenseExpired"
	EventLicenseExpiredGracePeriodOn                                  = "LicenseExpiredGracePeriodOn"
	EventMachineFingerPrintErr                                        = "MachineFingerPrintErr"
	EventGotMachineFingerPrint                                        = "GotMachineFingerPrint"
	EventConfigMapErr                                                 = "ConfigMapErr"
	EventGotConfigMap                                                 = "GotConfigMap"
	EventLicenseProxyUnreachable                                      = "LicenseProxyUnreachable"
	EventLicenseDeployError                                           = "LicenseDeployError"
	EventLicenseDeploySuccess                                         = "LicenseDeploySuccess"
	EventClusterMetadataCollectionFailed                              = "ClusterMetadataCollectionFailed"
	EventClusterMetadataCollectionSuccess                             = "ClusterMetadataCollectionSuccess"
	EventLicenseDataFetchError                                        = "LicenseDataFetchError"
	EventLicenseDataFetchSuccess                                      = "LicenseDataFetchSuccess"
	EventLicenseSecretCreationFailed                                  = "LicenseSecretCreationFailed"
	EventLicenseSecretCreationSuccess                                 = "LicenseSecretCreationSuccess"
	EventProjectDeleted                                               = "ProjectDeleted"
	EventProjectDeletionFailed                                        = "ProjectDeletionFailed"
	EventClusterDeleted                                               = "ClusterDeleted"
	EventClusterDeletionFailed                                        = "ClusterDeletionFailed"
	EventSliceConfigDeleted                                           = "SliceConfigDeleted"
	EventSliceConfigDeletionFailed                                    = "SliceConfigDeletionFailed"
	EventServiceExportConfigDeleted                                   = "ServiceExportConfigDeleted"
	EventServiceExportConfigDeletionFailed                            = "ServiceExportConfigDeletionFailed"
	EventSliceQoSConfigDeleted                                        = "SliceQoSConfigDeleted"
	EventSliceQoSConfigDeletionFailed                                 = "SliceQoSConfigDeletionFailed"
	EventSecretDeleted                                                = "SecretDeleted"
	EventSecretDeletionFailed                                         = "SecretDeletionFailed"
	EventNamespaceCreated                                             = "NamespaceCreated"
	EventNamespaceCreationFailed                                      = "NamespaceCreationFailed"
	EventNamespaceDeleted                                             = "NamespaceDeleted"
	EventNamespaceDeletionFailed                                      = "NamespaceDeletionFailed"
	EventWorkerClusterRoleCreated                                     = "WorkerClusterRoleCreated"
	EventWorkerClusterRoleCreationFailed                              = "WorkerClusterRoleCreationFailed"
	EventWorkerClusterRoleUpdated                                     = "WorkerClusterRoleUpdated"
	EventWorkerClusterRoleUpdateFailed                                = "WorkerClusterRoleUpdateFailed"
	EventReadOnlyRoleCreated                                          = "ReadOnlyRoleCreated"
	EventReadOnlyRoleCreationFailed                                   = "ReadOnlyRoleCreationFailed"
	EventReadOnlyRoleUpdated                                          = "ReadOnlyRoleUpdated"
	EventReadOnlyRoleUpdateFailed                                     = "ReadOnlyRoleUpdateFailed"
	EventReadWriteRoleCreated                                         = "ReadWriteRoleCreated"
	EventReadWriteRoleCreationFailed                                  = "ReadWriteRoleCreationFailed"
	EventReadWriteRoleUpdated                                         = "ReadWriteRoleUpdated"
	EventReadWriteRoleUpdateFailed                                    = "ReadWriteRoleUpdateFailed"
	EventServiceAccountCreated                                        = "ServiceAccountCreated"
	EventServiceAccountCreationFailed                                 = "ServiceAccountCreationFailed"
	EventServiceAccountSecretCreated                                  = "ServiceAccountSecretCreated"
	EventServiceAccountSecretCreationFailed                           = "ServiceAccountSecretCreationFailed"
	EventDefaultRoleBindingCreated                                    = "DefaultRoleBindingCreated"
	EventDefaultRoleBindingCreationFailed                             = "DefaultRoleBindingCreationFailed"
	EventDefaultRoleBindingUpdated                                    = "DefaultRoleBindingUpdated"
	EventDefaultRoleBindingUpdateFailed                               = "DefaultRoleBindingUpdateFailed"
	EventDefaultRoleBindingDeleted                                    = "DefaultRoleBindingDeleted"
	EventDefaultRoleBindingDeletionFailed                             = "DefaultRoleBindingDeletionFailed"
	EventInactiveRoleBindingDeleted                                   = "InactiveRoleBindingDeleted"
	EventInactiveRoleBindingDeletionFailed                            = "InactiveRoleBindingDeletionFailed"
	EventInactiveServiceAccountDeleted                                = "InactiveServiceAccountDeleted"
	EventInactiveServiceAccountDeletionFailed                         = "InactiveServiceAccountDeletionFailed"
	EventServiceAccountDeleted                                        = "ServiceAccountDeleted"
	EventServiceAccountDeletionFailed                                 = "ServiceAccountDeletionFailed"
	EventDefaultDeploymentSliceRoleTemplateCreationFailed             = "DefaultDeploymentSliceRoleTemplateCreationFailed"
	EventDefaultDeploymentSliceRoleTemplateCreated                    = "DefaultDeploymentSliceRoleTemplateCreated"
	EventDefaultReaderSliceRoleTemplateCreationFailed                 = "DefaultReaderSliceRoleTemplateCreationFailed"
	EventDefaultReaderSliceRoleTemplateCreated                        = "DefaultReaderSliceRoleTemplateCreated"
	EventSliceResourceQuotaCreationFailed                             = "SliceResourceQuotaCreationFailed"
	EventSliceResourceQuotaCreatedOnSliceConfigCreation               = "SliceResourceQuotaCreatedOnSliceConfigCreation"
	EventSliceNodeAffinityDeletionFailed                              = "SliceNodeAffinityDeletionFailed"
	EventSliceNodeAffinityDeleted                                     = "SliceNodeAffinityDeleted"
	EventSetSliceConfigAsOwnerOfSliceNodeAffinityFailed               = "SetSliceConfigAsOwnerOfSliceNodeAffinityFailed"
	EventSetSliceConfigAsOwnerOfSliceNodeAffinitySucceeded            = "SetSliceConfigAsOwnerOfSliceNodeAffinitySucceeded"
	EventSliceResourceQuotaDeletionFailed                             = "SliceResourceQuotaDeletionFailed"
	EventSliceResourceQuotaDeleted                                    = "SliceResourceQuotaDeleted"
	EventSliceResourceQuotaRecreationFailed                           = "SliceResourceQuotaRecreationFailed"
	EventSliceResourceQuotaRecreated                                  = "SliceResourceQuotaRecreated"
	EventSetSliceConfigAsOwnerOfSliceResourceQuotaFailed              = "SetSliceConfigAsOwnerOfSliceResourceQuotaFailed"
	EventSetSliceConfigAsOwnerOfSliceResourceQuotaSucceeded           = "SetSliceConfigAsOwnerOfSliceResourceQuotaSucceeded"
	EventSliceResourceQuotaCreated                                    = "SliceResourceQuotaCreated"
	EventSliceResourceQuotaUpdated                                    = "SliceResourceQuotaUpdated"
	EventAllRQSpecificationViolationMetricsResetSuccess               = "AllRQSpecificationViolationMetricsResetSuccess"
	EventSliceRQSpecificationViolationMetricsResetSuccess             = "SliceRQSpecificationViolationMetricsResetSuccess"
	EventClusterRQSpecificationViolationMetricsResetSuccess           = "ClusterRQSpecificationViolationMetricsResetSuccess"
	EventOutdatedNamespaceRQSpecificationViolationMetricsResetSuccess = "OutdatedNamespaceRQSpecificationViolationMetricsResetSuccess"
	EventOutdatedClusterRQSpecificationViolationMetricsResetSuccess   = "OutdatedClusterRQSpecificationViolationMetricsResetSuccess"
	EventSliceRoleBindingDeletingFailed                               = "SliceRoleBindingDeletingFailed"
	EventSliceRoleBindingDeleted                                      = "SliceRoleBindingDeleted"
	EventSetSliceConfigAsOwnerOfSliceRoleBindingFailed                = "SetSliceConfigAsOwnerOfSliceRoleBindingFailed"
	EventSetSliceConfigAsOwnerOfSliceRoleBindingSucceeded             = "SetSliceConfigAsOwnerOfSliceRoleBindingSucceeded"
	EventSliceRoleTemplateDeletionFailed                              = "SliceRoleTemplateDeletionFailed"
	EventSliceRoleTemplateDeleted                                     = "SliceRoleTemplateDeleted"
	EventWorkerSliceRoleBindingReconciliationSuccess                  = "WorkerSliceRoleBindingReconciliationSuccess"
	EventNetPolViolation                                              = "NetPolViolation"
)
